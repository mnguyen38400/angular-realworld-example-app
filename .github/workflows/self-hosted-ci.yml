name: Self-Hosted CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Ajout d'un déclencheur manuel pour faciliter les tests
  workflow_dispatch:

jobs:
  build-and-test:
    # Spécifie d'utiliser votre runner auto-hébergé au lieu des runners GitHub
    runs-on: self-hosted

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Log Node.js version
      run: node --version

    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-


    - name: Install dependencies
      if: steps.npm-cache.outputs.cache-hit != 'true'
      run: npm install --force

    - name: Run tests
      run: export CHROME_BIN=/usr/bin/chromium && npm test -- --watch=false --browsers=ChromeHeadless --no-progress

    - name: Build application
      run: npm run build -- --configuration production

  docker-build:
    runs-on: self-hosted
    needs: build-and-test

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Build Docker image
      run: docker build -t angular-app:${{ github.sha }} .

    - name: Test Docker image
      run: |
        echo "Testing Docker image..."
        docker run -d --name test-container -p 8080:80 angular-app:${{ github.sha }}
        echo "Container started, waiting for it to initialize..."
        sleep 10
        curl -s http://localhost:8080 | grep -q "conduit" && echo "Application is running correctly" || echo "Failed to verify application"
        docker stop test-container
        docker rm test-container

  cleanup:
    runs-on: self-hosted
    needs: build-and-test
    if: always()

    steps:
    - name: Clean workspace
      run: |
        echo "Cleaning workspace to free up disk space"
        rm -rf node_modules || true
        rm -rf dist || true
        npm cache clean --force || true

    - name: Prune Docker images
      run: |
        echo "Keeping only recent Docker images"
        docker image ls
        # Conserver seulement les 3 images les plus récentes
        docker image prune -a -f --filter "until=24h"
